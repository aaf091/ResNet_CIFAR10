{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import os\nimport pickle\nimport numpy as np\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.utils.data import Dataset, DataLoader\nimport torchvision\nimport torchvision.transforms as transforms\nimport pandas as pd\nfrom PIL import Image\nimport torchvision.transforms as transforms\nimport torchvision.datasets as datasets\nfrom torch.optim.lr_scheduler import StepLR\nimport torch.optim.lr_scheduler as lr_scheduler","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"class BottleneckBlock(nn.Module):\n    \"\"\"\n    A bottleneck block for ResNet.\n    In the original ResNet-50/101/152, the expansion is 4.\n    So if out_channels=64, the final output is 64 * 4 = 256 channels.\n\n    Args:\n        in_channels (int): Number of input channels.\n        out_channels (int): Number of \"inner\" channels before expansion.\n        stride (int): Stride to apply in the 3x3 convolution.\n    \"\"\"\n    expansion = 4  # Typical expansion factor\n\n    def __init__(self, in_channels, out_channels, stride=1):\n        super(BottleneckBlock, self).__init__()\n        self.conv1 = nn.Conv2d(in_channels, out_channels, kernel_size=1, bias=False)\n        self.bn1 = nn.BatchNorm2d(out_channels)\n        self.conv2 = nn.Conv2d(\n            out_channels, \n            out_channels, \n            kernel_size=3, \n            stride=stride, \n            padding=1, \n            bias=False\n        )\n        self.bn2 = nn.BatchNorm2d(out_channels)\n        self.conv3 = nn.Conv2d(\n            out_channels, \n            out_channels * self.expansion, \n            kernel_size=1, \n            bias=False\n        )\n        self.bn3 = nn.BatchNorm2d(out_channels * self.expansion)\n        self.relu = nn.ReLU(inplace=True)\n        # Shortcut (downsampling) if needed\n        if stride != 1 or in_channels != out_channels * self.expansion:\n            self.shortcut = nn.Sequential(\n                nn.Conv2d(\n                    in_channels, \n                    out_channels * self.expansion,\n                    kernel_size=1, \n                    stride=stride, \n                    bias=False\n                ),\n                nn.BatchNorm2d(out_channels * self.expansion)\n            )\n        else:\n            self.shortcut = nn.Identity()\n\n    def forward(self, x):\n        identity = x\n        out = self.conv1(x)\n        out = self.bn1(out)\n        out = self.relu(out)\n        out = self.conv2(out)\n        out = self.bn2(out)\n        out = self.relu(out)\n        out = self.conv3(out)\n        out = self.bn3(out)\n        out += self.shortcut(identity)\n        out = self.relu(out)\n        return out\n\ndef count_parameters(model):\n    return sum(p.numel() for p in model.parameters() if p.requires_grad)\n\nclass CustomResNetBottleneck(nn.Module):\n    \"\"\"\n    A ResNet-like architecture using BottleneckBlocks.\n    Adjust 'blocks_per_stage' and 'base_channels' to keep parameters < 5M.\n    \"\"\"\n    def __init__(self, blocks_per_stage=[3, 4, 6, 3], base_channels=32, num_classes=10):\n        \"\"\"\n        Args:\n            blocks_per_stage (list): Number of BottleneckBlocks in each of the 4 stages.\n            base_channels (int): The number of \"inner\" channels in the first bottleneck\n                                 stage. (Note that output of the first stage will be \n                                 base_channels*4 if using Bottleneck.)\n            num_classes (int): Number of output classes for classification.\n        \"\"\"\n        super(CustomResNetBottleneck, self).__init__()\n\n        self.in_channels = base_channels * BottleneckBlock.expansion\n        # Initial convolution for CIFAR-10 (3-channel, 32x32 images)\n        # We'll do a direct conv to base_channels * 4 in the official ResNet50 for CIFAR.\n        # But to keep things simpler, do a smaller conv here first if you like.\n        self.conv1 = nn.Conv2d(3, self.in_channels, kernel_size=3, stride=1, padding=1, bias=False)\n        self.bn1 = nn.BatchNorm2d(self.in_channels)\n        self.relu = nn.ReLU(inplace=True)\n\n        # Make 4 layers (stages)\n        # stage1 has stride=1\n        # stage2, stage3, stage4 often use stride=2 (downsampling)\n        self.layer1 = self._make_layer(base_channels, blocks_per_stage[0], stride=1)\n        self.layer2 = self._make_layer(base_channels * 2, blocks_per_stage[1], stride=2)\n        self.layer3 = self._make_layer(base_channels * 4, blocks_per_stage[2], stride=2)\n        self.layer4 = self._make_layer(base_channels * 8, blocks_per_stage[3], stride=2)\n\n        self.avg_pool = nn.AdaptiveAvgPool2d((1, 1))\n        self.fc = nn.Linear(base_channels * 8 * BottleneckBlock.expansion, num_classes)\n\n    def _make_layer(self, out_channels, num_blocks, stride):\n        \"\"\"\n        Creates a stage of bottleneck blocks.\n        \n        - First block may downsample if stride=2\n        - out_channels is the \"inner\" dimension; actual block out is out_channels * expansion\n        \"\"\"\n        layers = []\n        # First block in this stage\n        layers.append(BottleneckBlock(self.in_channels, out_channels, stride=stride))\n        # After the first block, the \"in_channels\" for the next block will be\n        # out_channels * expansion\n        self.in_channels = out_channels * BottleneckBlock.expansion\n\n        # Remaining blocks have stride=1\n        for _ in range(1, num_blocks):\n            layers.append(BottleneckBlock(self.in_channels, out_channels, stride=1))\n            # in_channels remains out_channels * expansion\n\n        return nn.Sequential(*layers)\n\n    def forward(self, x):\n        out = self.conv1(x)\n        out = self.bn1(out)\n        out = self.relu(out)\n        out = self.layer1(out)\n        out = self.layer2(out)\n        out = self.layer3(out)\n        out = self.layer4(out)\n        out = self.avg_pool(out)\n        out = torch.flatten(out, 1)\n        out = self.fc(out)\n        return out\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Data Loading Function for CIFAR-10 using torchvision\ndef get_data(batch_size=128):\n    transform_train = transforms.Compose([\n        transforms.AutoAugment(policy=transforms.AutoAugmentPolicy.CIFAR10),\n        transforms.RandomCrop(32, padding=4),\n        transforms.RandomHorizontalFlip(),\n        transforms.ColorJitter(brightness=0.2, contrast=0.2, saturation=0.2, hue=0.1),\n        transforms.RandomRotation(15),\n        transforms.ToTensor(),\n        transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),\n    ])\n\n    transform_test = transforms.Compose([\n        transforms.ToTensor(),\n        transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),\n    ])\n        \n    train_dataset = torchvision.datasets.CIFAR10(root='/kaggle/input/deep-learning-spring-2025-project-1/cifar-10-python', train=True,\n                                                 download=False, transform=transform_train)\n    val_dataset = torchvision.datasets.CIFAR10(root='/kaggle/input/deep-learning-spring-2025-project-1/cifar-10-python', train=False,\n                                                download=False, transform=transform_test)\n    train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True, num_workers=2)\n    val_loader = DataLoader(val_dataset, batch_size=batch_size, shuffle=False, num_workers=2)\n    return train_loader, val_loader","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def train_one_epoch(model, train_loader, criterion, optimizer, device):\n    model.train()\n    running_loss = 0.0\n    for inputs, targets in train_loader:\n        inputs, targets = inputs.to(device), targets.to(device)\n\n        optimizer.zero_grad()\n        outputs = model(inputs)\n        loss = criterion(outputs, targets)\n        loss.backward()\n        optimizer.step()\n\n        running_loss += loss.item()\n\n    return running_loss / len(train_loader)\n\ndef evaluate(model, test_loader, device):\n    model.eval()\n    correct = 0\n    total = 0\n    with torch.no_grad():\n        for inputs, targets in test_loader:\n            inputs, targets = inputs.to(device), targets.to(device)\n            outputs = model(inputs)\n            _, predicted = torch.max(outputs, dim=1)\n            total += targets.size(0)\n            correct += (predicted == targets).sum().item()\n    return 100.0 * correct / total","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Choosing acccelerator\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint('Using: 'device)\n\n# Get Data\ntrain_loader, val_loader = get_data(batch_size=128)\n\n# Example: smaller config for <5M params\n# Try [3, 4, 6, 2] or [3, 4, 4, 2] with base_channels=32\nmodel_bottleneck = CustomResNetBottleneck(blocks_per_stage=[7, 6, 6, 2], base_channels=32, num_classes=10).to(device)\n\n# Check parameter count\nprint(\"Total parameters:\", count_parameters(model_bottleneck))","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"epochs = 200\nbatch_size = 128\nlr = 0.1\nmomentum = 0.9\nweight_decay = 5e-4\ncriterion = nn.CrossEntropyLoss()\noptimizer = optim.SGD(model_bottleneck.parameters(), lr=lr,\n                      momentum=momentum,\n                      weight_decay=weight_decay)\n\n# LR Scheduler: Cosine annealing over 200 epochs\n# scheduler = CosineAnnealingLR(optimizer, T_max=epochs)\nscheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer, mode='max', factor=0.5, patience=5, verbose=True)\n\nbest_acc = 0.0\nfor epoch in range(1, epochs + 1):\n    train_loss = train_one_epoch(model_bottleneck, train_loader, criterion, optimizer, device)\n    test_acc = evaluate(model_bottleneck, val_loader, device)\n\n    # Step the LR scheduler\n    scheduler.step(test_acc)\n\n    if test_acc > best_acc:\n        best_acc = test_acc\n        # Save best model so far\n        torch.save(model_bottleneck.state_dict(), \"best_bottleneck_cifar10.pth\")\n\n    print(f\"Epoch [{epoch}/{epochs}] \"\n          f\"Train Loss: {train_loss:.4f} | \"\n          f\"Test Acc: {test_acc:.2f}% | Best: {best_acc:.4f}%\")\n\nprint(f\"Finished training. Best test acc = {best_acc:.4f}%\")\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Template code for reading the test file\ndef load_cifar_batch(file):\n    with open(file, 'rb') as fo:\n        batch = pickle.load(fo, encoding='bytes')\n    return batch\n\n# Load the test batch (update the file path if necessary)\ncifar10_batch = load_cifar_batch('/kaggle/input/deep-learning-spring-2025-project-1/cifar_test_nolabel.pkl')\n\n# Extract images; the test data is in (N x W x H x C) format\nimages = cifar10_batch[b'data']\nprint(f\"Loaded test batch with {images.shape[0]} images\")","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Create a dataset from the images array\nclass TestDatasetFromArray(Dataset):\n    def __init__(self, images, transform=None):\n        self.images = images\n        if transform is None:\n            # Default transform: convert numpy array to PIL Image, then to tensor, then normalize\n            self.transform = transforms.Compose([\n                transforms.ToPILImage(),\n                transforms.ToTensor(),\n                transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),\n            ])\n        else:\n            self.transform = transform\n\n    def __len__(self):\n        return len(self.images)\n\n    def __getitem__(self, idx):\n        img = self.images[idx]\n        if isinstance(img, np.ndarray):\n            img = img.astype('uint8')\n        if self.transform:\n            img = self.transform(img)\n        return img\n\n# Create the test dataset and dataloader\ntest_dataset = TestDatasetFromArray(images)\nloader_test = DataLoader(test_dataset, batch_size=128, shuffle=False)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Inference Mode\n# This cell loads a saved model checkpoint (if available) and runs inference on the test dataset.\n# Predictions are then saved to a CSV file.\n\nif os.path.exists(\"best_bottleneck_cifar10.pth\"):\n    model_bottleneck.load_state_dict(torch.load(\"best_bottleneck_cifar10.pth\", map_location=device))\n    print(\"Loaded model checkpoint from best_bottleneck_cifar10.pth\")\nelse:\n    print(\"No checkpoint found. Running inference with untrained model.\")\n\nfrom datetime import datetime\n\nn1 = datetime.now()\nprint(n1)\n\nmodel_bottleneck.eval()\npredictions = []\nwith torch.no_grad():\n    for batch in loader_test:\n        batch = batch.to(device)\n        outputs = model_bottleneck(batch)\n        _, preds = torch.max(outputs, 1)\n        predictions.extend(preds.cpu().numpy().tolist())\n\n\n\nfilename = 'submission_bottleneck_'+str(n1)+'.csv' \n# Save predictions to CSV using pandas\ndf = pd.DataFrame({\"ID\": range(len(predictions)), \"Labels\": predictions})\ndf.to_csv(filename, index=False)\nprint(\"Predictions saved to \"+ filename)","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}